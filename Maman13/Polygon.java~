
/**
 * Represent a Polygon 
 *
 * @author Ran Shiloni
 * @version 3018992212
 */
public class Polygon
{
    private Point[] _vertices;
    private int _noOfVertices;
    final int MAX_VERTICES = 10;

    // Constructor
    /**
     * Initialazation constructor building an array of Points that will make a Polygon
     */
    public Polygon ()
    {
        _vertices = new Point[MAX_VERTICES]; 
        _noOfVertices = 0;
    }

    /**
     * Adds a point to the Polygon, assuming the input is valid and in order. 
     * @return True if the operation is successful, false if the shape is already complete or input is invalid.
     */
    public boolean addVertex(double x, double y)
    {
        if (_noOfVertices < MAX_VERTICES)
        {
            _vertices[_noOfVertices] = new Point(x,y);
            _noOfVertices++; // Updating the counter
            return true;
        }
        return false;
    }

    /**
     * Finds the highest point in the polygon. 
     * @return The highest Point in the polygon. Returns null if the array is empty.
     */
    public Point highestVertex()
    {
        if (_noOfVertices == 1) return new Point(_vertices[0]);
        int i;
        if (_noOfVertices > 1)
        {
            Point highest = new Point(_vertices[0]); 
            //highest getting the first point now that we know that the Polygon has more than one point
            for (i=1; i<_noOfVertices; i++)
            {

                if (_vertices[i].isAbove(_vertices[i-1]))
                {
                    highest = new Point(_vertices[i]);
                }
            }
            return highest;
        }
        return null;
    }

    /**
     * Return a string representation of this polygon in the format ((2.0,1.0),(5.0,0.0),(7.0,5.0),(4.0,6.0),(1.0,4.0)) for example.
     * @return String representation of this segment or that the array is empty.
     */
    public String toString()
    {
        if (_noOfVertices == 1) 
        {
            return "(" + _vertices[0] +")";
        }
        else if (_noOfVertices > 1)
        {
            int i;
            String output = "("; 
            for (i=0; i<_noOfVertices-1; i++) 
            //for all the array except the last point
            {
                output+= _vertices[i] + ",";
            }
            output+= _vertices[_noOfVertices-1] + ")"; //adding the last point with closing ( and without comma
            return output;
        }
        return "The polygon has 0 vertices.";
    }
    
    /**
     * Calculates the perimeter of the polygon. Returns 0 if there's only one vertice.
     * @retun the perimeter of the polygon
     */
    public double calcPerimeter () 
    {
        double sum = 0;
        if (_noOfVertices >2 )
        {
            int i=0;
            while (i < _noOfVertices -1)
            {
                sum += _vertices[i].distance(_vertices[i+1]);
                i++;
            }
            // adds the last distance from the last point to the new to close the polygon
            sum += _vertices[_noOfVertices-1].distance(_vertices[0]);
            return sum;
        }
        
        if (_noOfVertices == 2)
        return _vertices[0].distance(_vertices[1]);
        //There are less than 2 points
        return 0;
    }
    
    /**
     * Calculates the area of the Polygon. Returns 0 if there are less than 3 points.
     * @return the area of the Polygon
     */
    public double calcArea()
    {
        if (_noOfVertices < 3) return 0;
        double sum = 0;
        int lastVertice = 1;
        //going over all the triangles in the Polygon created from the first point in the array and 2 following points
        while (lastVertice < _noOfVertices -1)
        {
            sum += triangleArea(_vertices[0], _vertices[lastVertice], _vertices[lastVertice+1]);
            lastVertice = lastVertice + 1;
        }
        //if the number of vertices is odd does the last calculation
        // if (!(_noOfVertices % 2 == 0) && !(_noOfVertices == 3)) 
            // sum += triangleArea(_vertices[0], _vertices[lastVertice-2], _vertices[lastVertice-1]);
        return sum;
    }
    
    //Calculates the area of a triangle 
    private double triangleArea(Point a, Point b, Point c)
    {
        double ab = a.distance(b);
        double bc = b.distance(c);
        double ca = c.distance(a);
        //s is half of the triangle Perimiter
        double s = (ab+bc+ca)/2.0;
         //Heron formula
        return Math.sqrt(s*((s-ab)*(s-bc)*(s-ca)));
    }
    
    /**
     * Calculates the area of this and the reference Polygon and returns true if this Poligon's area is bigger
     * @return true if this Poligon is bigger
     */
    public boolean isBigger(Polygon other) 
    {
        return (calcArea() > other.calcArea());
    }
    
    /**
     * Searching for the reference point in the Polygon and returns it's index location or if it doesn't exist returns -1
     * @return the index of the reference point or -1 if it can not be found
     */
    public int findVertex(Point p)
    {
        if (_noOfVertices < 1) return -1;
        int i = 0;
        while (i < _noOfVertices)
        {
            if (_vertices[i].equals(p)) return i;
            i++;
        }
        //no match found
        return -1;
    }
    
    /**
     * Finds and returns the next Vertex in the Polygon. Returns null if the reference point can not be found or the first point if the reference is the last point.
     * @ return the next Vertex Point
     */
    public Point getNextVertex(Point p) 
    {
        if (_noOfVertices == 1)
        {
            if (_vertices[0].equals(p))
            {
                return new Point(p);
            }
        }
        int matchIndex = findVertex(p);
        if (matchIndex == -1) return null;
        //if there's a match and it is not the last point
        if (matchIndex < _noOfVertices -2) 
        {
            return new Point(_vertices[matchIndex+1]);
        } else if (matchIndex == _noOfVertices -1) //if it's the last point
        {
            return _vertices[0];
        }
        //if all else fail
        return null;
    }
    
    /**
     * Returns a square Polygon that encompases this Polygon and is parallel to the axis. Returns null if there are less than 3 point.
     * returns the encompassing Polygon
     */
    public Polygon getBoundingBox()
    {
        if (_noOfVertices < 3) return null;
        int i = 0;
        while (i < _noOfVertices)
        {
            if
        }
        
        
        
    }
    
    private Polygon mostLeft()
    {
        int i = 0;
        while (i < _noOfVertices) 
        {
            
            i++;
        }
    }
    
    
    
    
    
    
    
    
            
                
    
    
    
    
    
    
    


    
}
